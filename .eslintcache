[{"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\index.js":"1","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\App.js":"2","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\reportWebVitals.js":"3","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\Containers\\LoopMachine\\LoopMachine.js":"4","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Pads\\Pads.js":"5","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\Grid\\Grid.js":"6","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\ControPanel\\ConrolPanel.js":"7","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\Button\\Button.js":"8","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\Square\\Square.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":237,"mtime":1609429133449,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":8354,"mtime":1609874770220,"results":"14","hashOfConfig":"11"},{"size":1361,"mtime":1609881868929,"results":"15","hashOfConfig":"11"},{"size":559,"mtime":1609881868915,"results":"16","hashOfConfig":"11"},{"size":1101,"mtime":1609874352737,"results":"17","hashOfConfig":"11"},{"size":357,"mtime":1609669594911,"results":"18","hashOfConfig":"11"},{"size":882,"mtime":1609882009177,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"15syjxj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\index.js",[],["41","42"],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\App.js",[],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\reportWebVitals.js",[],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\Containers\\LoopMachine\\LoopMachine.js",["43"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport './LoopMachine.css';\r\nimport Grid from \"../../UI/Grid/Grid\";\r\nimport ControlPanel from \"../../UI/ControPanel/ConrolPanel\";\r\nimport { Pads } from '../../../Pads/Pads'\r\n\r\nconst LoopMachine = props => {\r\n        const [padsToPlay, setPadsToPlay] = useState([]);\r\n        const [toPlay, setToPlay] = useState(false);\r\n        const [mainPad, setMainPad] = useState(null);\r\n        const [isRecording, setIsRecording] = useState(false);\r\n        const [userEvents, setUserEvents] = useState([]);\r\n        const [nextSession, setNextSession] = useState([]);\r\n        const [isPlayingRecord, setIsPlayingRecord] = useState(false);\r\n        const [userRecords, setUserRecords] = useState([]);\r\n\r\n\r\n        const onPlayClick = () => {\r\n            if (padsToPlay.length > 0 && !toPlay)\r\n                setToPlay(true);\r\n            if (isRecording)\r\n                updateSessionNumber();\r\n        };\r\n\r\n        const onStopClick = () => {\r\n            setToPlay(false);\r\n            stopAllPads();\r\n            if (isRecording)\r\n                updateSessionNumber();\r\n        };\r\n\r\n        const onRecordClick = () => {\r\n            setIsRecording(true);\r\n        };\r\n\r\n        /**\r\n         * Set end time to all of the current playing audios.\r\n         */\r\n        const onStopRecordClick = () => {\r\n            setIsRecording(false);\r\n            let updatedSession = [];\r\n            const lastSession = [...userEvents[userEvents.length - 1]];\r\n            const stopTime = lastSession[0].audio.currentTime;\r\n            lastSession.map(pad => updatedSession.push(pad.pause ? pad : {audio: pad.audio, time: stopTime, pause: true}));\r\n            setUserEvents([...userEvents.slice(0, userEvents.length - 1), updatedSession]);\r\n        };\r\n\r\n        const setNextSessionPlay = (event, index) => {\r\n            playSession(index);\r\n        };\r\n\r\n        /**\r\n         * Used for the record option - play\r\n         * @param index - The index of the current session in userEvents.\r\n         */\r\n        const playSession = (index) => {\r\n            if (index + 1 < userEvents.length) {\r\n                let loop = userEvents[index];\r\n                const longest = getLongestAudio(loop);\r\n                loop.filter(pad => pad.audio.id !== longest.audio.id);\r\n                longest.audio.onended = ((event) => setNextSessionPlay(event, index + 1));\r\n                loop = [...loop, longest];\r\n                setUserEvents(userEvents.splice(index, 1, loop));\r\n            }\r\n            userEvents[index].map(pad => handlePlayPad(pad));\r\n        };\r\n\r\n        const onPlayRecordClick = () => {\r\n            setUserRecords(userEvents);\r\n            playSession(0);\r\n            setIsPlayingRecord(true);\r\n        };\r\n\r\n        const stopPad = pad => {\r\n            pad.pause();\r\n            pad.currentTime = 0;\r\n            return pad;\r\n        };\r\n\r\n        const stopAllPads = useCallback(() => {\r\n                const allPads = padsToPlay;\r\n                padsToPlay.map(pad => stopPad(pad));\r\n                setPadsToPlay(allPads);\r\n            }, [padsToPlay]\r\n        );\r\n\r\n        const playAllPads = useCallback(() => {\r\n                stopAllPads();\r\n                padsToPlay.map(pad => pad.play());\r\n            }, [padsToPlay, stopAllPads]\r\n        );\r\n\r\n        const updateMainPad = pad => {\r\n            if (mainPad) mainPad.onended = null;\r\n            setMainPad(pad);\r\n        };\r\n\r\n        const handleAddPad = audio => {\r\n            setPadsToPlay([...padsToPlay, audio]);\r\n            updateMainPad(padsToPlay.length > 0 ? padsToPlay[0] : audio);\r\n        };\r\n\r\n\r\n        /**\r\n         * Stop the audio, remove it from the array that holds the pads that are playing\r\n         * and update the pad which leads the loop.\r\n         * @param audio - audio to stop\r\n         */\r\n        const handleRemovePad = audio => {\r\n            audio.pause();\r\n            audio.currentTime = 0;\r\n            const newPadsToPlay = padsToPlay.filter(pad => pad.id !== audio.id);\r\n            setPadsToPlay(newPadsToPlay);\r\n            updateMainPad(newPadsToPlay[0]);\r\n        };\r\n\r\n        const handleClickOnPad = (event, audio) => {\r\n            if (isRecording)\r\n                handleClickOnPadRecord(audio);\r\n            if (padsToPlay.includes(audio))\r\n                handleRemovePad(audio);\r\n            else\r\n                handleAddPad(audio);\r\n        };\r\n\r\n        const updateSessionNumber = useCallback(() => {\r\n            setUserEvents([...userEvents, nextSession]);\r\n            setNextSession(nextSession.filter(pad => !pad.pause));\r\n        }, [nextSession, setUserEvents, userEvents]);\r\n\r\n\r\n        const playAllPadsRecord = useCallback(() => {\r\n                if (toPlay) {\r\n                    updateSessionNumber();\r\n                    playAllPads();\r\n                }\r\n            }, [playAllPads, updateSessionNumber, toPlay]\r\n        );\r\n\r\n\r\n        useEffect(() => {\r\n            if (!isPlayingRecord && toPlay && padsToPlay.length > 0) {\r\n                mainPad.onended = isRecording ? playAllPadsRecord : playAllPads;\r\n                if (toPlay && !padsToPlay.find(pad => pad.currentTime !== 0))\r\n                    playAllPads();\r\n            } else if (padsToPlay.length === 0)\r\n                setToPlay(false);\r\n        }, [padsToPlay, playAllPads, toPlay, mainPad, isRecording, playAllPadsRecord, isPlayingRecord]);\r\n\r\n\r\n        const handleAddPadRecord = (audio, userEvent) => {\r\n            setNextSession(nextSession.filter(pad => pad.audio.id !== audio.id));\r\n            setNextSession([...nextSession, userEvent]);\r\n        };\r\n\r\n        const handleRemovePadRecord = (audio, userEvent) => {\r\n            let sessionToUpdate = [...userEvents[userEvents.length - 1]];\r\n            sessionToUpdate = sessionToUpdate.filter(pad => pad.audio.id !== audio.id);\r\n            sessionToUpdate.push(userEvent);\r\n            setUserEvents([...userEvents.slice(0, userEvents.length - 1), sessionToUpdate]);\r\n            setNextSession(nextSession.filter(pad => pad.audio.id !== audio.id));\r\n        };\r\n\r\n\r\n        const handleClickOnPadRecord = audio => {\r\n            const userEvent = {audio: audio, time: audio.currentTime, pause: (!audio.paused)};\r\n            if (!audio.paused)\r\n                handleRemovePadRecord(audio, userEvent);\r\n            else\r\n                handleAddPadRecord(audio, userEvent);\r\n        };\r\n\r\n        const handlePlayPad = pad => {\r\n            pad.audio.play();\r\n            if (pad.pause) {\r\n                setTimeout(() => {\r\n                    pad.audio.pause();\r\n                }, pad.time * 1000);\r\n            }\r\n        };\r\n\r\n        const getLongestAudio = padsList => {\r\n            return padsList.reduce((prev, current) => (prev.y > current.y) ? prev : current);\r\n        };\r\n\r\n        const controls = [\r\n            {\r\n                text: 'Play',\r\n                icon: 'fas fa-play-circle',\r\n                clickHandler: onPlayClick,\r\n                disable: padsToPlay.length === 0 || toPlay\r\n            },\r\n            {text: 'Stop', icon: 'fas fa-stop-circle', clickHandler: onStopClick, disable: !toPlay},\r\n        ];\r\n\r\n        const controlsRecord = [{\r\n            text: 'Record',\r\n            icon: 'fas fa-record-vinyl',\r\n            clickHandler: onRecordClick,\r\n            disable: isRecording || padsToPlay.length > 0 || toPlay\r\n        },\r\n            {\r\n                text: 'Stop Record',\r\n                icon: 'fas fa-record-vinyl',\r\n                clickHandler: onStopRecordClick,\r\n                disable: !(isRecording)\r\n            },\r\n            {\r\n                text: 'Play Record',\r\n                icon: 'fas fa-record-vinyl',\r\n                clickHandler: onPlayRecordClick,\r\n                disable: false\r\n            }];\r\n\r\n        return (\r\n            <div className=\"loopMachine\" >\r\n                <ControlPanel\r\n                    controls={ controls }\r\n                    controlsRecord={ controlsRecord } />\r\n                    <h3> Tap on pad(s) and press play, enjoy! </h3>\r\n                <Grid\r\n                    cells={ Pads }\r\n                    handleCellClick={ handleClickOnPad }\r\n                    allowPlay={ padsToPlay.length > 0 } />\r\n            </div >\r\n        );\r\n    }\r\n;\r\n\r\nexport default LoopMachine;\r\n","C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Pads\\Pads.js",[],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\Grid\\Grid.js",[],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\ControPanel\\ConrolPanel.js",[],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\Button\\Button.js",[],["44","45"],"C:\\Users\\Sapir\\WebstormProjects\\loop-machine\\src\\Components\\UI\\Square\\Square.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":15,"column":16,"nodeType":"52","messageId":"53","endLine":15,"endColumn":27},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'userRecords' is assigned a value but never used.","Identifier","unusedVar",["56"],["57"],"no-global-assign","no-unsafe-negation"]